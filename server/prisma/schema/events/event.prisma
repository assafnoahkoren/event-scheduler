// Event model tied to sites

model Event {
  id          String   @id @default(uuid())

  // Site this event belongs to
  siteId      String   @map("site_id")
  site        Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)

  // Event details
  title       String?
  description String?
  location    String?

  // Client relationship (optional)
  clientId    String?  @map("client_id")
  client      Client?  @relation(fields: [clientId], references: [id])

  // Timing
  startDate   DateTime @map("start_date")
  endDate     DateTime? @map("end_date")
  timezone    String   @default("UTC")
  isAllDay    Boolean  @default(false) @map("is_all_day")

  // Status
  status      EventStatus @default(SCHEDULED)

  // Created by
  createdBy   String   @map("created_by")
  creator     User     @relation(fields: [createdBy], references: [id])

  // Products attached to this event
  products    EventProduct[]

  // Service providers working on this event
  providers EventProvider[]

  // Waiting list entries that were fulfilled by this event
  waitingListEntries WaitingListEntry[]

  // User activities related to this event
  userActivities UserActivity[]

  // Tasks related to this event
  tasks Task[]

  // Payments for this event
  payments Payment[]

  // Soft delete
  deletedAt   DateTime? @map("deleted_at")
  isDeleted   Boolean   @default(false) @map("is_deleted")

  // Timestamps
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@index([siteId])
  @@index([startDate])
  @@index([createdBy])
  @@index([clientId])
  @@index([isDeleted])
  @@index([siteId, isDeleted]) // Composite index for common query
  @@map("events")
}

enum EventStatus {
  DRAFT
  SCHEDULED
  CANCELLED
}