model Task {
  id          String       @id @default(uuid())
  title       String
  description String?      @db.Text
  status      TaskStatus   @default(PENDING)
  priority    TaskPriority @default(MEDIUM)
  dueDate     DateTime?

  // Relations
  eventId String @map("event_id")
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  parentTaskId String? @map("parent_task_id")
  parentTask   Task?   @relation("TaskSubtasks", fields: [parentTaskId], references: [id], onDelete: Cascade)
  subtasks     Task[]  @relation("TaskSubtasks")

  assignedToId String? @map("assigned_to_id")
  assignedTo   User?   @relation(fields: [assignedToId], references: [id], onDelete: SetNull)

  // Audit fields
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  createdById String   @map("created_by_id")
  createdBy   User     @relation("TaskCreatedBy", fields: [createdById], references: [id])

  // Soft delete
  deletedAt DateTime? @map("deleted_at")
  isDeleted Boolean   @default(false) @map("is_deleted")

  @@index([eventId, isDeleted])
  @@index([parentTaskId, isDeleted])
  @@index([assignedToId, isDeleted])
  @@index([status, isDeleted])
  @@index([isDeleted])
  @@map("tasks")
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
