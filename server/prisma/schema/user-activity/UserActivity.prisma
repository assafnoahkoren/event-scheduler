// User Activity Tracking - Records all user actions across the platform

model UserActivity {
  id String @id @default(uuid())

  // Who performed the activity
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  // Organization context (required - all activities belong to an org)
  organizationId String       @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Optional event context
  eventId String? @map("event_id")
  event   Event?  @relation(fields: [eventId], references: [id])

  // Activity details
  activityType   ActivityType     @map("activity_type")
  activityDomain ActivityDomain?  @map("activity_domain") // Domain/category of the activity
  messageType    ActivityMessage? @map("message_type") // Message type enum for rendering
  data           Json?            @map("data") // JSON data with message parameters

  // Object reference (polymorphic)
  objectType String @map("object_type") // e.g., "Event", "Client", "ServiceProvider"
  objectId   String @map("object_id")

  // Who has viewed this activity
  views UserActivityView[]

  // Soft delete
  deletedAt DateTime? @map("deleted_at")
  isDeleted Boolean   @default(false) @map("is_deleted")

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([userId])
  @@index([organizationId])
  @@index([eventId])
  @@index([objectType, objectId])
  @@index([activityType])
  @@index([isDeleted])
  @@index([organizationId, isDeleted]) // Composite index for common query
  @@index([eventId, isDeleted]) // Composite index for event queries
  @@map("user_activities")
}

enum ActivityType {
  CREATE
  EDIT
  DELETE
  ACCESS
  INVITE
  ACCEPT
  REJECT
  UPLOAD
  DOWNLOAD
  SHARE
}

enum ActivityMessage {
  EVENT_CREATED
}

enum ActivityDomain {
  EVENTS
  PRODUCTS
  CLIENTS
  SERVICE_PROVIDERS
  ORGANIZATIONS
  SITES
  FILES
  AUTH
}
